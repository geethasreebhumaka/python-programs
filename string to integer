class Solution(object):
    def myAtoi(self, s):
        """
        :type s: str
        :rtype: int
        """
        # Define the 32-bit signed integer range
        INT_MAX = 2**31 - 1
        INT_MIN = -2**31

        i = 0
        n = len(s)

        # 1. Ignore leading whitespace
        while i < n and s[i] == ' ':
            i += 1

        # Handle empty string after whitespace removal
        if i == n:
            return 0

        # 2. Determine the sign
        sign = 1
        if s[i] == '-':
            sign = -1
            i += 1
        elif s[i] == '+':
            i += 1

        # Handle string like "+", "-"
        if i == n:
            return 0

        # 3. Convert digits to integer
        result = 0
        while i < n and s[i].isdigit():
            digit = int(s[i])
            
            # Check for overflow/underflow before adding the digit
            if sign == 1 and (result > INT_MAX // 10 or (result == INT_MAX // 10 and digit > 7)):
                return INT_MAX
            if sign == -1 and (result > abs(INT_MIN) // 10 or (result == abs(INT_MIN) // 10 and digit > 8)):
                return INT_MIN
            
            result = result * 10 + digit
            i += 1

        # Apply the sign and return the result
        return sign * result
